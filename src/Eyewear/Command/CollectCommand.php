<?php

declare(strict_types=1);

namespace Eyewear\Command;

use DateTime;
use Exception;
use Eyewear\Collector\CollectorInterface;
use Eyewear\Collector\CollectorManager;
use Eyewear\Collector\Schema\SchemaSizeCollector;
use Eyewear\Database\ConnectionFactory;
use Eyewear\Magento\Edition\EditionFactory;
use Eyewear\Report\JsonReport;
use PDOException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Collect Magento2 database stats
 */
class CollectCommand extends Command
{
    /**
     * @var CollectorManager
     */
    private $collectorManager;

    /**
     * @var EditionFactory
     */
    private $editionFactory;

    public function __construct(string $name = null)
    {
        parent::__construct($name);

        $this->collectorManager = new CollectorManager();
        $this->editionFactory = new EditionFactory();
    }

    /**
     * Command Config
     */
    protected function configure()
    {
        parent::configure();

        $this->setName('collect');
        $this->setDescription('Collects Magento2 database stats');

        $this->addOption('user', 'u', InputOption::VALUE_REQUIRED, 'Database User');
        $this->addOption('password', 'p', InputOption::VALUE_REQUIRED, 'Database Password');
        $this->addOption('database', 'd', InputOption::VALUE_REQUIRED, 'Database Name');
        $this->addOption('host', 'hst', InputOption::VALUE_OPTIONAL, 'Database Host', 'localhost');
        $this->addOption('port', 'prt', InputOption::VALUE_OPTIONAL, 'Database Port', '3306');
        $this->addOption('edition', 'e', InputOption::VALUE_OPTIONAL, 'Magento Edition', 'ce');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return int
     * @throws Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $output->writeln('Eyewear ğŸ‘“ is running:');

        $user = $input->getOption('user');
        $password = $input->getOption('password');
        $database = $input->getOption('database');
        $host = $input->getOption('host');
        $port = $input->getOption('port');
        $editionCode = $input->getOption('edition');

        $this->collectorManager->setEdition(
            $this->editionFactory->create($editionCode)
        );

        $output->writeln(sprintf('â€¢ Connecting to the database %s (%s)..', $database, strtoupper($editionCode)));

        try {
            $connection = ConnectionFactory::create(
                $user,
                $password,
                $database,
                $host,
                $port
            );
        } catch(PDOException $ex){
            $output->writeln(sprintf('âœ˜ Cannot connect to the database: %s', $ex->getMessage()));

            return 1;
        }

        $output->writeln('â€¢ Collecting database metrics..');

        $databaseMetrics = [
            [
                'title' => 'Generated by Eyewear',
                'timestamp' => (new DateTime())->format(DateTime::ATOM),
            ]
        ];

        /** @var CollectorInterface $collector */
        foreach ($this->collectorManager->getCollectors() as $collector) {
            $metrics = $collector->collect($connection);

            $output->writeln(
                sprintf('â€¢ Collector %s: %s', get_class($collector), json_encode($metrics)),
                OutputInterface::VERBOSITY_DEBUG
            );

            $databaseMetrics[] = $metrics;
        }

        $schemaSizeMetrics = (new SchemaSizeCollector())->collect($connection, $database);
        $output->writeln(
            sprintf('â€¢ Collector Eyewear\Collector\Schema\SchemaSizeCollector: %s', json_encode($schemaSizeMetrics)),
            OutputInterface::VERBOSITY_DEBUG
        );
        $databaseMetrics[] = $schemaSizeMetrics;

        $databaseMetricMerged = array_merge_recursive(...$databaseMetrics);

        $reportPath = sprintf('eyewear-db-report.%s.json', (new DateTime())->getTimestamp());

        $output->writeln(sprintf('â€¢ Generating a report in %s..', $reportPath));
        (new JsonReport())->save($reportPath, $databaseMetricMerged);

        return 0;
    }
}